// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Goods defines model for Goods.
type Goods struct {
	Goods *[]Product `json:"goods,omitempty"`
	Meta  *struct {
		Limit   *int `json:"limit,omitempty"`
		Offset  *int `json:"offset,omitempty"`
		Removed *int `json:"removed,omitempty"`
		Total   *int `json:"total,omitempty"`
	} `json:"meta,omitempty"`
}

// Product defines model for Product.
type Product struct {
	// CreatedAt Product creation date.
	CreatedAt *string `json:"created_at,omitempty"`

	// Description Description of product.
	Description *string `json:"description,omitempty"`

	// Id ID of product.
	Id *int `json:"id,omitempty"`

	// Name Name of product.
	Name *string `json:"name,omitempty"`

	// Priority Priority of product.
	Priority *int `json:"priority,omitempty"`

	// ProjectId Product project id.
	ProjectId *int `json:"projectId,omitempty"`

	// Removed Product deletion status.
	Removed *bool `json:"removed,omitempty"`
}

// CreateProductJSONBody defines parameters for CreateProduct.
type CreateProductJSONBody struct {
	Name string `binding:"required,min=1" json:"name"`
}

// CreateProductParams defines parameters for CreateProduct.
type CreateProductParams struct {
	// ProjectId Product project Id.
	ProjectId int `form:"projectId" json:"projectId"`
}

// DeleteProductParams defines parameters for DeleteProduct.
type DeleteProductParams struct {
	// Id ID of product.
	Id int `form:"id" json:"id"`

	// ProjectId Product project ID.
	ProjectId int `form:"projectId" json:"projectId"`
}

// UpdateProductJSONBody defines parameters for UpdateProduct.
type UpdateProductJSONBody struct {
	Description *string `json:"description,omitempty"`
	Name        string  `binding:"required,min=1" json:"name"`
}

// UpdateProductParams defines parameters for UpdateProduct.
type UpdateProductParams struct {
	// Id ID of product.
	Id int `form:"id" json:"id"`

	// ProjectId Product project ID.
	ProjectId int `form:"projectId" json:"projectId"`
}

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// Limit Product display limit. Default to 10.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset From which position to display. Default to 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PatchGoodsReprioritizeJSONBody defines parameters for PatchGoodsReprioritize.
type PatchGoodsReprioritizeJSONBody struct {
	NewPriority int `json:"newPriority"`
}

// PatchGoodsReprioritizeParams defines parameters for PatchGoodsReprioritize.
type PatchGoodsReprioritizeParams struct {
	// Id Product ID.
	Id int `form:"id" json:"id"`

	// ProjectId Project ID.
	ProjectId int `form:"projectId" json:"projectId"`
}

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody CreateProductJSONBody

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody UpdateProductJSONBody

// PatchGoodsReprioritizeJSONRequestBody defines body for PatchGoodsReprioritize for application/json ContentType.
type PatchGoodsReprioritizeJSONRequestBody PatchGoodsReprioritizeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create product
	// (POST /good/create)
	CreateProduct(c *gin.Context, params CreateProductParams)
	// Delete product
	// (DELETE /good/remove)
	DeleteProduct(c *gin.Context, params DeleteProductParams)
	// Update existing product
	// (PATCH /good/update)
	UpdateProduct(c *gin.Context, params UpdateProductParams)
	// Get goods list
	// (GET /goods/list)
	GetProducts(c *gin.Context, params GetProductsParams)
	// UpdateProductPriority
	// (PATCH /goods/reprioritize)
	PatchGoodsReprioritize(c *gin.Context, params PatchGoodsReprioritizeParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateProductParams

	// ------------- Required query parameter "projectId" -------------

	if paramValue := c.Query("projectId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument projectId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "projectId", c.Request.URL.Query(), &params.ProjectId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProduct(c, params)
}

// DeleteProduct operation middleware
func (siw *ServerInterfaceWrapper) DeleteProduct(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteProductParams

	// ------------- Required query parameter "id" -------------

	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "projectId" -------------

	if paramValue := c.Query("projectId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument projectId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "projectId", c.Request.URL.Query(), &params.ProjectId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProduct(c, params)
}

// UpdateProduct operation middleware
func (siw *ServerInterfaceWrapper) UpdateProduct(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateProductParams

	// ------------- Required query parameter "id" -------------

	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "projectId" -------------

	if paramValue := c.Query("projectId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument projectId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "projectId", c.Request.URL.Query(), &params.ProjectId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProduct(c, params)
}

// GetProducts operation middleware
func (siw *ServerInterfaceWrapper) GetProducts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProducts(c, params)
}

// PatchGoodsReprioritize operation middleware
func (siw *ServerInterfaceWrapper) PatchGoodsReprioritize(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchGoodsReprioritizeParams

	// ------------- Required query parameter "id" -------------

	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "projectId" -------------

	if paramValue := c.Query("projectId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument projectId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "projectId", c.Request.URL.Query(), &params.ProjectId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchGoodsReprioritize(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/good/create", wrapper.CreateProduct)
	router.DELETE(options.BaseURL+"/good/remove", wrapper.DeleteProduct)
	router.PATCH(options.BaseURL+"/good/update", wrapper.UpdateProduct)
	router.GET(options.BaseURL+"/goods/list", wrapper.GetProducts)
	router.PATCH(options.BaseURL+"/goods/reprioritize", wrapper.PatchGoodsReprioritize)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yXUW/jNgzHv4qg7TGNnfXNwB5uC9YFGIbghj0VxaDajM2DLekkOm16yHcfJNlJHCuN",
	"u12BAbs32yIpifz5L+oLz1WjlQRJlmdfuM0raIR/vFOq8A/aKA2GEPxb2X9GgsY/fG9gwzP+XXIMlXRx",
	"krVRRZsT38847TTwjAtjxM69N0BiHL7GBsk9dOYoCUowzkFtNhYujBlo1BaK+CApEnVs6Lgq9fgJ3DLH",
	"X2a838NorbkBQVD8JfxYATY3qAmV5FnvxLwNKskKQTDnh/CWDMrShR/4nYdZHt+Y2jAdokbjYDF2Xy3j",
	"XifJkaKBsePvooFrE2qDyiDtYpsPI1cn10a5LK+KywnsTBgW8RAnlY8HKKAGnz9Lglp7EuVRqRqEjHLg",
	"Eio3ahz2w3rFNsqwX+HlpXaxkGrn6d/Zh/WKz/gWjA3Wi3k6Tz28GqTQyDN+O0/nt3zGtaDKY5S4XyoJ",
	"MHnIlI0A9bMft30+2RNSxUrcgjxLkSPUI+ey2rn1CLtZjWiAwFie3V/L+coHRDf0uQWz4z0uJ4VzFfjc",
	"onElINPCrNOQ6P/2EKzB0k+q8ODkShJIv1+hdY25X3ryyYa/4Rhr+Ov11DYofwNZUsWzxTmiM/58o4TG",
	"m1wVUIK8gWcy4oZE6UM8oiycWXbYwKxB+eMiFP+4qfsw2UOEEW9ntZI2rOqHNH3TniYp5/5cI/gfbZ6D",
	"tZ5b2zaNMLtDpXs+HJl+o/edYj8464Ba+GUCYjUQxGTHfY/CtlqOIQvmEyEbaVKML3wjWLOrKC/fA+V/",
	"Ufshz3jh6BoI5JRj74qmTQEpVHMKSK0ues0SlFdjjv70BpbBM1pCWU4FKvj9D4H6Gtp41lCMzu1v2jlC",
	"PvA2wvQV9m1SYzimS4ic1h+BWiMt86bMm54zfgfUrdNOPZcLtLoWO+ab5Dlbwka0NTFSbJFeojE01G9j",
	"/RejGvZUYV4xrSz67olUP/1g4ovzdt36u2roawyE68tkAu6AhsW6XHgDXeeLL1O0Tx+Eo2uKh52bH4t1",
	"bmsX1u/i4+mEE1G5LE9fQwn/4woo4Wl9cjmJXPsGEnVi/R5KNVxbX0oYXqKntgOv7mp0dR3euf95SzA4",
	"jw/JivwkzgvMtmezNTXPeEWksySpVS7qSlnKbtM0TYTGZLvg+4f93wEAAP//HxDh+YUQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
